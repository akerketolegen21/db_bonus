[{"/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/index.js":"1","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/App.js":"2","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/reportWebVitals.js":"3","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/FindAverage.js":"4","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/ListRecords.js":"5","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/inputRecord.js":"6","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/Menu.js":"7","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/EditRecord.js":"8"},{"size":297,"mtime":1637158881760,"results":"9","hashOfConfig":"10"},{"size":555,"mtime":1637243219351,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1637152872769,"results":"12","hashOfConfig":"10"},{"size":2622,"mtime":1638360276807,"results":"13","hashOfConfig":"10"},{"size":2962,"mtime":1638360308838,"results":"14","hashOfConfig":"10"},{"size":3891,"mtime":1638360298481,"results":"15","hashOfConfig":"10"},{"size":268,"mtime":1637249950223,"results":"16","hashOfConfig":"10"},{"size":2130,"mtime":1638360265816,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1afiw8s",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/index.js",[],"/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/App.js",[],"/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/reportWebVitals.js",[],"/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/FindAverage.js",["39"],"import React, { Fragment, useEffect, useState } from \"react\"\n\nconst FindAverage = () => {\n    const [records, setRecords] = useState([])\n    const [countryAvg, setCountryAvg] = useState([])\n    const [specialization, setSpecialization] = useState(\"\")\n    const getRecords = async () => {\n        try {\n            const response = await fetch(`/descriptions`)\n            const jsonData = await response.json()\n            setRecords(jsonData)\n            setSpecialization(records[0].description)\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n    useEffect(() => {\n        getRecords()\n    }, [])\n\n    const onSubmitForm = async e => {\n        e.preventDefault()\n        try {\n            const body = { specialization }\n            const response = await fetch(`/findAVG/${specialization}`,\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(body)\n                })\n            const jsonData = await response.json()\n            setCountryAvg(jsonData)\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const changeStuff = (value) => {\n        setSpecialization(value)\n        setCountryAvg([])\n    }\n\n    return <Fragment>\n        <form className=\"d-flex mt-5\" onSubmit={onSubmitForm}>\n            <div className=\"form-control mr-1\">\n                <select className=\"form-control\" value={specialization} \n                onChange={e => changeStuff(e.target.value)}>\n                    {records.map(record => {\n                        return <option key={record.description}>{record.description}</option>\n                    })}\n                </select>\n                <h6 className=\"mt-1\">Choose specialization</h6>\n            </div>\n            <button className=\"btn btn-info ml-2\">Find Average Salaries for all countries</button>\n        </form>\n        <div>\n    <h4 className=\"mt-5\">Country averages for {specialization} diseases</h4>\n    <table className=\"table table-hover\" id=\"myTable\" >\n        <thead>\n            <tr>\n                <th>Country</th>\n                <th>Average Salary</th>\n            </tr>\n        </thead>\n        <tbody>\n            {countryAvg.map(record => (\n                <tr key={record.cname}>\n                    <td>{record.cname}</td>\n                    <td>{record.avg? parseFloat(record.avg).toFixed(2) : 0}</td>\n                </tr>\n            ))}\n        </tbody>\n    </table>\n    </div>\n    </Fragment>\n}\n\nexport default FindAverage","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/ListRecords.js",["40","41"],"import React, { Fragment, useEffect, useState } from \"react\"\nimport EditRecord from \"./EditRecord\"\n\nconst ListRecords = () => {\n    const [records, setRecords] = useState([])\n\n    //del func\n    const deleteRecord = async (id) => {\n        try {\n            const deleteRecord = await fetch(`/records/${id}`, {\n                method: \"DELETE\"\n            })\n            setRecords(records.filter(record => record.recordID !== id))\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    const getRecords = async () => {\n        try {\n            const response = await fetch(\"/records\")\n            const jsonData = await response.json()\n            setRecords(jsonData)\n            sortTable()\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n\n    useEffect(() => {\n        getRecords()\n    }, [])\n\n    const sortTable = () => {\n        var table, rows, switching, i, x, y, shouldSwitch;\n        table = document.getElementById(\"myTable\");\n        switching = true;\n        while (switching) {\n            switching = false;\n            rows = table.rows;\n            for (i = 1; i < (rows.length - 1); i++) {\n                shouldSwitch = false;\n                x = rows[i].getElementsByTagName(\"TD\")[0];\n                y = rows[i + 1].getElementsByTagName(\"TD\")[0];\n                if (Number(x.innerHTML) > Number(y.innerHTML)) {\n                    shouldSwitch = true;\n                    break;\n                }\n            }\n            if (shouldSwitch) {\n                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n                switching = true;\n            }\n        }\n    }\n\n    return <Fragment>\n        <h1 className=\"mt-5\">All Records</h1>\n        <table className=\"table table-hover\" id=\"myTable\" >\n            <thead>\n                <tr>\n                    <th>#</th>\n                    <th>Servant email</th>\n                    <th>Country</th>\n                    <th>Disease Code</th>\n                    <th>Total deaths</th>\n                    <th>Total patients</th>\n                    <th></th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {records.map(record => (\n                    <tr key={record.recordID}>\n                        <td>{record.recordID}</td>\n                        <td>{record.email}</td>\n                        <td>{record.cname}</td>\n                        <td>{record[\"disease code\"]}</td>\n                        <td>{record[\"total deaths\"]}</td>\n                        <td>{record[\"total patients\"]}</td>\n                        <td><EditRecord record={record} /></td>\n                        <td><button className=\"btn btn-danger\"\n                            onClick={() => deleteRecord(record.recordID)}>Delete</button></td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </Fragment>\n}\n\nexport default ListRecords","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/inputRecord.js",["42"],"import React, { Fragment, useState, useEffect } from \"react\";\n\nconst InputRecord = () => {\n    // eslint-disable-next-line\n    const [email, setEmail] = useState(\"\")\n    const [cname, setCname] = useState(\"\")\n    const [dcode, setDcode] = useState(\"\")\n    const [deaths, setDeaths] = useState(0)\n    const [patients, setPatients] = useState(0)\n\n    const [servants, setServants] = useState([])\n    const [countries, setCountries] = useState([])\n    const [dcodes, setDcodes] = useState([])\n\n    const getServants = async () => {\n        try {\n            const response = await fetch(\"/servants\")\n            const jsonData = await response.json()\n            setServants(jsonData)\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n    const getCountries = async () => {\n        try {\n            const response = await fetch(\"/countries\")\n            const jsonData = await response.json()\n            setCountries(jsonData)\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n    const getDcodes = async () => {\n        try {\n            const response = await fetch(\"/dcodes\")\n            const jsonData = await response.json()\n            setDcodes(jsonData)\n        } catch (error) {\n            console.error(error.message)\n        }\n    }\n\n    const onSubmitForm = async e => {\n        e.preventDefault()\n        try {\n            const body = { email, cname, dcode, deaths, patients }\n            const response = await fetch(\"/records\",\n                {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(body)\n                })\n                window.location = \"/\"\n        } catch (error) {\n            console.log(error.message)\n        } \n    }\n\n    useEffect(() => {\n        getServants()\n    }, [])\n\n    useEffect(() => {\n        getCountries()\n    }, [])\n    useEffect(() => {\n        getDcodes()\n    }, [])\n    return <Fragment>\n        <form className=\"d-flex mt-5\" onSubmit={onSubmitForm}>\n            <div className=\"form-control mr-1\">\n                <select className=\"form-control\" value={email} onChange={e => setEmail(e.target.value)}>\n                    {servants.map(servant => {\n                        return <option key={servant.email}>{servant.email}</option>\n                    })}\n                </select>\n                <h6 className=\"mt-1\">Choose servant email</h6>\n            </div>\n            <div className=\"form-control mr-1\">\n                <select className=\"form-control\" value={cname} onChange={e => setCname(e.target.value)}>\n                {countries.map(country => {\n                        return <option key={country.cname}>{country.cname}</option>\n                    })}\n                </select>\n                <h6 className=\"mt-1\">Choose disease country</h6>\n                <input type=\"number\" className=\"form-control\" id=\"deaths\" value={deaths} onChange={e => setDeaths(e.target.value)} />\n                <h6 className=\"mt-1\">Add total deaths</h6>\n            </div>\n            <div className=\"form-control\">\n                <select className=\"form-control\" value={dcode} onChange={e => setDcode(e.target.value)}>\n                {dcodes.map(dcode => {\n                        return <option key={dcode[\"disease code\"]}>{dcode[\"disease code\"]}</option>\n                    })}\n                </select>\n                <h6 className=\"mt-1\">Choose disease code</h6>\n                <input type=\"number\" className=\"form-control\" id=\"patients\" value={patients} onChange={e => setPatients(e.target.value)} />\n                <h6 className=\"mt-1\">Add total patients</h6>\n            </div>\n            <button className=\"btn btn-success ml-2\">Add Record</button>\n        </form>\n    </Fragment>\n}\n\nexport default InputRecord","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/Menu.js",["43"],"import React, { Fragment } from \"react\"\n\nconst Menu = () => {\n    return <Fragment>\n        <nav className=\"navbar navbar-expand-sm bg-success navbar-dark\">\n            <a className=\"navbar-brand\" href=\"#\">Main</a>\n        </nav>\n    </Fragment>\n}\n\nexport default Menu","/Users/akerketolegen/Documents/3yrfall/дб на всякий копия/db_bonus/client/src/components/EditRecord.js",["44"],"import React, { Fragment, useState } from \"react\"\n\nconst EditRecord = ({ record }) => {\n    const [deaths, setDeaths] = useState(record[\"total deaths\"])\n\n    const updateDeaths = async e => {\n        e.preventDefault()\n        try {\n            const body = { deaths }\n            const response = await fetch(`/records/deaths/${record.recordID}`, {\n                method: \"PUT\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify(body)\n            })\n            window.location = \"/\"\n        } catch (error) {\n            console.log(error.message)\n        }\n    }\n\n    return <Fragment>\n        <button type=\"button\" className=\"btn btn-warning\" data-toggle=\"modal\" data-target={`#id${record.recordID}`}>\n            Edit\n        </button>\n\n        <div className=\"modal\" id={`id${record.recordID}`} onClick={() => setDeaths(record[\"total deaths\"])}>\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n\n                    <div className=\"modal-header\">\n                        <h4 className=\"modal-title\">Edit record</h4>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={() => setDeaths(record[\"total deaths\"])}>&times;</button>\n                    </div>\n\n                    <div className=\"modal-body\">\n                        <h6>Edit total deaths</h6>\n                        <input type=\"number\" className=\"form-control\" value={deaths}\n                            onChange={e => setDeaths(e.target.value)}></input>\n                    </div>\n\n                    <div className=\"modal-footer\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-warning\"\n                            data-dismiss=\"modal\"\n                            onClick={e => updateDeaths(e)}>Edit</button>\n                        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    </Fragment>\n}\n\nexport default EditRecord",{"ruleId":"45","severity":1,"message":"46","line":19,"column":8,"nodeType":"47","endLine":19,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":10,"column":19,"nodeType":"51","messageId":"52","endLine":10,"endColumn":31},{"ruleId":"45","severity":1,"message":"46","line":32,"column":8,"nodeType":"47","endLine":32,"endColumn":10,"suggestions":"53"},{"ruleId":"49","severity":1,"message":"54","line":47,"column":19,"nodeType":"51","messageId":"52","endLine":47,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":6,"column":13,"nodeType":"57","endLine":6,"endColumn":50},{"ruleId":"49","severity":1,"message":"54","line":10,"column":19,"nodeType":"51","messageId":"52","endLine":10,"endColumn":27},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecords'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-unused-vars","'deleteRecord' is assigned a value but never used.","Identifier","unusedVar",["59"],"'response' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"desc":"60","fix":"61"},{"desc":"60","fix":"62"},"Update the dependencies array to be: [getRecords]",{"range":"63","text":"64"},{"range":"65","text":"64"},[631,633],"[getRecords]",[860,862]]